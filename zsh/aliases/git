alias g='git status'
alias ga='git add'
alias gf='git fetch'

# REMOTES
alias gre='git remote -v'
glsremotedate() {
    remote=${1?provide a remote name}
    git ls-remote -h $remote 2> /dev/null | awk '{ system("git show --no-patch --no-notes --pretty='"'"'%cs'"'"' " $1 "  | tr -d '"'"'\n'"'"'"); print "\t" $0; }'
}

# Reset and other destructive tendencies
alias gr='git reset HEAD'
alias grf='git reset HEAD --force'

# Branching, committing
alias gc='git commit'
alias gac='git commit -am'
alias gcam='git commit --amend --no-edit'
alias gcamp='git commit --amend --no-edit && git push -f'
alias gacamp='git add . && git commit --amend --no-edit && git push -f'
alias gb='git branch -vv'
alias gbp='git rev-parse --abbrev-ref HEAD'
alias gh='git checkout'
alias gm='git merge --ff-only'              #Shorthand git merge, with some safety
alias grc='git rebase --continue'
alias gump='git fetch upstream && git push origin upstream/master:master'
# Poll upstream, update master locally and in origin.
# TODO: doesn't work if checked out to master, use `gump && git pull` as a workaround
alias glhf='git fetch upstream && git push origin upstream/master:master && git fetch origin master:master'
alias gfomm='git fetch origin master:master'
gdummypush() { ga . && gc -m '.' && git push }

# History and depth diving
alias gd='git diff'
alias gdq='git diff --name-only'
alias gl='git log --oneline --graph'
alias glm='git log --oneline --graph master..'
alias glms='git log --oneline --graph --name-status master..'
alias glmp='git log --oneline --graph -p master..'
alias glc='git log --name-only -1'          #Show the files changed in this commit
glcm() { glc $1; git diff $1..$1~1; }       #Show the changes to the files in this commit
alias glf='git log --oneline --name-only'   #Show the log with commit messages and files changed
alias gul='git pull'
alias guldukat='git pull --rebase'
alias gp='git push'
gpr() {
    # git push to remote
    [[ $# -lt 1 ]] && { >&2 echo "$0 requires 1 argument: the remote name. One of:"; git remote; return 2; }
    local remote=$1
    shift
    git push -u $remote `git rev-parse --abbrev-ref HEAD` $@
}
alias gpom='git push origin master'

# Stashing
alias gs='git stash list'
alias gss='git stash save'
gsa() {
    [[ $# -ne 1 ]] && { >&2 echo "gsa requires 1 argument: the stash number"; return 2; }
    git stash apply "stash@{$1}"
    return $?
}
gsp() {
    [[ $# -ne 1 ]] && { >&2 echo "gsp requires 1 argument: the stash number"; return 2; }
    git stash pop "stash@{$1}"
    return $?
}

# Worktrees
alias gw='git worktree list'
# Find the git directory in the case where toplevel .git is not the git directory
gdir() {
    local GIT_ROOT=`git rev-parse --show-toplevel`
    [[ -z $GIT_ROOT ]] && return 1

    if [[ -d "$GIT_ROOT/.git" ]]; then
        local GIT_WORKTREE_DIR="$GIT_ROOT/.git"
    else
        local GIT_WORKTREE_DIR=$(cat $GIT_ROOT/.git | cut -f 2 -d' ')
    fi

    if [[ -f "$GIT_WORKTREE_DIR/commondir" ]]; then
        local GIT_DIR="$GIT_WORKTREE_DIR/$(cat $GIT_WORKTREE_DIR/commondir)"
    else
        local GIT_DIR="$GIT_WORKTREE_DIR"
    fi

    echo $GIT_DIR
}

gi() {
    g
    echo "--(branches)-------------"
    gb
    echo "--(stashes)--------------"
    gs
    echo "--(worktrees)------------"
    gw
}

gbcleanup() {
    [[ $# -ne 1 ]] && { >&2 echo "$0 requires 1 argument: the branch name"; return 2; }
    local branch=$1
    shift 1
    git push --delete origin $branch
    git branch -D $branch
}

# vim: set ft=sh:

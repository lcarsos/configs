alias dockre=docker

# making docker ps output less useless
dpg() {
    # Take docker output, print the first line and any line matching $@
    # Because docker ps is a bastard, recolumning (because ports are long)
    # uses a sed to turn 2+ spaces into tabs and then use column to columnize
    # on tab characters.
    docker ps -a | sed "1p;/$@/!d" | sed "s/  \+/\t/g" | column -t -s $'\t'
}

# docker images accepts an image name as a filter but requires an exact match.
# this makes docker images less useless (it doesn't fix the slowness problem)
dim() { # I can't call this di (see below), and I can't call it dig (dns util)
    docker images | sed "1p;/$@/!d" | sed "s/  \+/\t/g" | column -t -s $'\t'
}

# List out all the layers in this image
dimlayers() {
    for image in $@; do
        echo $image
        echo -e "CREATED\t\t\t\tIMAGE\t\t\t\t\t\t\t\t  TAGS"
        local lookup=$image
        while [[ $lookup != "" ]]; do
            docker inspect -f "{{.Created}}  {{.Id}}  {{.RepoTags}}" $lookup | sed 's/  /\t/'
            lookup=$(docker inspect -f "{{.Parent}}" $lookup)
        done
    done
}
alias diml=dimlayers

# Making docker inspect not useless, requires `jq'
di() {
    local jq_opts=.
    docker inspect $1 >/dev/null 2>&1
    if [[ $? -ne 0 ]]; then
        jq_opts=$1
        shift 1
    fi
    docker inspect $@ | jq -C $jq_opts | less -RFX
}
alias divols='di ".[].HostConfig.Binds"'
alias distate='di ".[].State"'
alias diconf='di ".[].Config"'
alias dienv='di ".[].Config.Env"'

# Making docker logs less useless
dl() {
    local tail=20
    if [[ $# -gt 1 ]]; then
        tail=$1
        shift 1
    fi
    docker logs --tail=${tail} $@
}
alias dlf='dl -f'
dls() { # short for docker log since
    # Usage: dls time container
    #   time:      how far back you want to go. Supports whole seconds,
    #              minutes, hours, and days
    #   container: the name of the container you want logs since
    # You MUST specify a time value. Everything else is passed through to
    # docker logs
    # Examples:
    #   dls 5m container    # Gives you the last 5 minutes of logs
    #   dls 1h container    # Gives you the last 1 hour of logs
    #   dls 5m -t container # You can pass through any options to docker logs
    #   dls 5 container     # If you specify only number dls defaults to minutes
    local amount=""
    local scale=""
    if [[ $# -lt 2 ]]; then
        >2 echo "You must specify a time"
        return 1
    fi
    amount=${1:0:${#1}-1}
    case "${1:${#1}-1:1}" in
        s ) scale=seconds ;;
        m ) scale=minutes ;;
        h ) scale=hours ;;
        d ) scale=days ;;
        * ) scale=minutes ;;
    esac
    shift 1
    docker logs --since=$(date --date="-${amount} ${scale}" +%s) $@
}

de() {
    docker exec -it $@ /bin/bash
}

dr() {
    docker run -it --rm --entrypoint=/bin/bash $@
}
drsh() { # In case the image doesn't have bash
    docker run -it --rm --entrypoint=/bin/sh $@
}

# I don't bloody care about this container. End it. I'm going to be replacing it.
dend() {
    docker kill $@
    docker rm $@
}

alias rmcontainers="docker ps -a | grep Exited | awk -F '  +' '{ print $6; }' | grep -v '\.' | xargs docker rm"
alias rminone="docker images --no-trunc | grep none | awk '{ print $3; }' | xargs docker rmi"

# vim: set ft=sh:
